#!/bin/bash
#store="/persistent/TOOD2"
#states=$store"/states"
#overlayChanges="/overlay/TOOD2_20151108/overlay"
#snapshotDateTime=`date +%Y%m%d_%H%M`

#Debug
#rm -Rf $states/20151109*
#ls $states
#echo "Try rm $snapshotDateTime"
dstForMove=$states"/"$preparedAt
dst=$states"/"$snapTo
dstChanges=$changes"/"$snapTo
changesSync=$changes"/.sync"
last=$states"/last"
if [ -d "$dstForMove" ]; then
  echo "Move folder $dstForMove to $dst"
  mv "$dstForMove" "$dst"
elif [ $onlyPrepare -eq 1 ] && [ $onlySnap -eq 0 ]; then
  echo "Only rsync changes"
else
  echo "Try clean dir $dst"
  rm -Rf "$dst"
  echo "cp last to $snapTo"  
  cp -Ralp "$last" "$dst"
fi

#sync changes
if [ ! -d "$overlayChanges" ]; then
  echo "!!Dir does not exists $overlayChanges"
  return 2
fi
echo "Rsync changes from overlay to persistent drive"
rsync -arv --numeric-ids --acls --xattrs --delete "$overlayChanges/" "$changesSync"
chkEx || return $?

if [ $onlyPrepare -eq 0 ]; then
  #На всякий случай проверям есть ли папка для изменений
  if [ -d "$dstChanges" ]; then
    #Удаляем
    rm -Rf "$dstChanges"
  fi
  #Изменения Подготовительного снапшота не нужны
  if [ -d "$changes"/"$preparedAt" ]; then
    rm -Rf "$changes"/"$preparedAt"
  fi


  #mkdir -p "$dstChanges"

  echo ""
  echo "Enumerate changes:"
  if [ ! -d "$changesSync" ]; then
    echo "!!Dir does not exists $changesSync"
    return 3
  fi
  #Сделаем копию изменений линками
  cp -Ralp "$changesSync" "$dstChanges"

  cd "$changesSync"
  find -print0 | while read -r -d $'\0' FILE; do
    F=`echo "$FILE" | sed 's/^\.\///'`
    DIR=`dirname "$F"`
    FILENAME=$(basename "$F")
    #echo "Item:$F"
    if [ "$FILE" == "." ]; then
      echo "Skip root dir"
    elif [[ "$FILENAME" =~ ^\.wh\. ]]; then
      if [[ ! "$FILENAME" =~ ^\.wh\.\.wh\. ]]; then
        #Изменения
        #rm -Rf "$dstChanges/$F"
        #rsync -a --numeric-ids --acls --xattrs "$changesSync/$F" "$dstChanges/$F"

        FILENAME=`echo "$FILENAME" | sed 's/^\.wh\.//'`
        F=$DIR"/"$FILENAME
        echo "Whiteout!! $DIR/$FILENAME"
        if [ $onlySnap -eq 0 ]; then
          rm -fvR "$last/$F"
        fi
        rm -fvR "$dst/$F"
      fi
    elif [ -c "$FILE" ]; then
      echo "Remove file "$F
      if [ $onlySnap -eq 0 ]; then
        rm -fvR "$last/$F"
      fi
      rm -fvR "$dst/$F"
    
      #Изменения
      #rm -Rf "$dstChanges/$F"
      #rsync -a --numeric-ids --acls --xattrs "$changesSync/$F" "$dstChanges/$F"
    
      #Не убираем с оверлэй слоя
      #rm -fv "$changesSync/$F"
    elif [ -d "$FILE" ]; then
      echo "Dir $F"
      if [ -f "$dst/$F" ]; then
        #Если раньше был файл, а теперь каталог
        rm -fv "$dst/$F"
        rm -fv "$last/$F"
        mkdir -p "$dst/$DIR"
        mkdir -p "$last/$DIR"
      fi

      #Пока будем удалять аттрибут отвечающий за перезапись каталога
      #проверять атрибут и удалить папку в месте назначения, если он есть
      setfattr --remove "trusted.overlay.opaque" "$changesSync/$F/"
      if [ $? -eq 0 ]; then
        #Успешно удалили атрибут, значит нужно удалить папку в месте назначения
        rm -Rf "$dst/$F"
        rm -Rf "$last/$F"
      fi

      #Dir with attributes
      rsync -ad --numeric-ids --acls --xattrs --no-recursive --exclude='*' "$changesSync/$F/" "$dst/$F"
      incErrCnt

      #Атрибуты для папки в last
      rsync -ad --numeric-ids --acls --xattrs --no-recursive --exclude='*' "$changesSync/$F/" "$last/$F"
      incErrCnt

      #Аттрибуты для папки в changes
      #rsync -ad --numeric-ids --acls --xattrs --no-recursive --exclude='*' "$changesSync/$F/" "$dstChanges/$F"
      #incErrCnt
    elif [ -f "$FILE" ]; then
      if [ -d "$dst/$F" ]; then
        #Если раньше был каталог, а сейчас файл
        rm -Rf "$dst/$F"
        rm -Rf "$last/$F"
      else
        #Принудительно удалим, чтобы создался новый inode
        rm -f "$dst/$F"
        rm -f "$last/$F"
      fi

      echo "Rsync file $F"
      mkdir -p "$dst/$DIR"
      #rsync -a --numeric-ids --acls --xattrs "$changesSync/$F" "$dst/$F"
      ln -fv "$changesSync/$F" "$dst/$F"
      incErrCnt
      mkdir -p "$last/$DIR"
      ln -fv "$dst/$F" "$last/$F"
      incErrCnt

      #mkdir -p "$dstChanges/$DIR"
      #ln -fv "$dst/$F" "$dstChanges/$F"
      #incErrCnt
    fi
  done
echo "Finish enum"
echo ""
#onlyPrepare=0
else
  echo "Skip copying, because "
fi

